{"version":3,"sources":["components/EmployeeCard/EmployeeCard.module.css","services/employeesAPI.js","redux/employees/employeesOperations.js","redux/employees/employeesSlice.js","redux/store.js","redux/employees/employeesSelectors.js","components/EmployeesActiveList/EmployeesActiveList.js","components/EmployeeCard/EmployeeCard.js","components/EmployeesAllList/EmployeesAllList.js","App.js","index.js","components/EmployeesActiveList/EmployeesActiveList.module.css","components/EmployeesAllList/EmployeesAllList.module.css"],"names":["module","exports","BASE_URL","a","axios","get","data","defaults","baseURL","employeesAPI","fetchEmployeesAll","getEmployeesAllData","createAsyncThunk","_","rejectWithValue","employeesAllData","message","employeesSlice","createSlice","name","initialState","employeesAll","employeesAllLoading","employeesAllError","employeesActive","reducers","addEmployeeActiveId","state","payload","includes","push","removeEmployeeActiveId","filter","item","extraReducers","pending","fulfilled","action","rejected","actions","employeesPersistConfig","key","storage","whitelist","store","configureStore","reducer","employees","persistReducer","employeesReducer","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","getEmployeesAll","getEmployeesActive","getEmployeesAllSorted","createSelector","alphabetEnglish","reduce","acc","letter","result","employeesGroup","forEach","employeesItem","firstName","at","toLowerCase","getEmployeesActiveSorted","months","employeesActiveIds","month","formattedBirthdayMonth","Date","dob","toLocaleString","id","sort","b","lastName","localeCompare","EmployeesActiveList","useSelector","className","styles","employeesActiveListWrap","employeesActiveListTitle","employeesActiveList","map","employeesActiveListItem","monthTitle","length","employeesGroupItem","getDate","getFullYear","EmployeeCard","dispatch","useDispatch","useState","employeeStatus","setEmployeeStatus","useEffect","onEmployeeStatusChange","e","target","value","classNames","employeeName","active","employeeCard","join","employeeStatusBtnLabel","type","checked","onChange","EmployeesAllList","employeesAllSorted","employeesAllListWrap","employeesAllListTitle","employeesAllList","employeesAllListItem","letterTitle","employeesGroupList","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.24c95dc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeeCard\":\"EmployeeCard_employeeCard__2HddF\",\"employeeName\":\"EmployeeCard_employeeName__1jk49\",\"active\":\"EmployeeCard_active__1kb-v\",\"employeeStatusBtnLabel\":\"EmployeeCard_employeeStatusBtnLabel__2XPQP\"};","import axios from 'axios';\r\nconst BASE_URL = 'https://yalantis-react-school-api.yalantis.com/api/task0';\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\n\r\nasync function fetchEmployeesAll() {\r\n  const { data } = await axios.get(`${BASE_URL}/users`);\r\n  return data;\r\n}\r\n\r\nconst employeesAPI = {\r\n  fetchEmployeesAll,\r\n};\r\n\r\nexport default employeesAPI;\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport employeesAPI from '../../services/employeesAPI';\r\n\r\nconst getEmployeesAllData = createAsyncThunk(\r\n  'employees/getEmployeesAllData',\r\n  async (_, { rejectWithValue }) => {\r\n    try {\r\n      const employeesAllData = await employeesAPI.fetchEmployeesAll();\r\n\r\n      return employeesAllData;\r\n    } catch (err) {\r\n      return rejectWithValue(err.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport { getEmployeesAllData };\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getEmployeesAllData } from '../employees/employeesOperations';\r\n\r\nconst initialState = {\r\n  employeesAll: [],\r\n  employeesAllLoading: false,\r\n  employeesAllError: null,\r\n  employeesActive: [],\r\n};\r\n\r\nconst employeesSlice = createSlice({\r\n  name: 'employees',\r\n  initialState,\r\n  reducers: {\r\n    addEmployeeActiveId: (state, { payload }) => {\r\n      if (!state.employeesActive.includes(payload))\r\n        state.employeesActive.push(payload);\r\n    },\r\n\r\n    removeEmployeeActiveId: (state, { payload }) => {\r\n      state.employeesActive = state.employeesActive.filter(\r\n        (item) => item !== payload\r\n      );\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getEmployeesAllData.pending](state) {\r\n      state.employeesAllLoading = true;\r\n      state.employeesAllError = null;\r\n    },\r\n    [getEmployeesAllData.fulfilled](state, action) {\r\n      state.employeesAll = action.payload;\r\n      state.employeesAllLoading = false;\r\n      state.employeesAllError = null;\r\n    },\r\n    [getEmployeesAllData.rejected](state, action) {\r\n      state.employeesAllLoading = false;\r\n      state.employeesAllError = action.payload;\r\n    },\r\n  },\r\n});\r\nexport const { addEmployeeActiveId, removeEmployeeActiveId } =\r\n  employeesSlice.actions;\r\n\r\nexport default employeesSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport employeesReducer from './employees/employeesSlice';\r\n\r\nconst employeesPersistConfig = {\r\n  key: 'employeesActive',\r\n  storage,\r\n  whitelist: ['employeesActive'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    employees: persistReducer(employeesPersistConfig, employeesReducer),\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getEmployeesAll = (state) => state.employees.employeesAll;\r\nconst getEmployeesAllIsLoading = (state) => state.employees.employeesAllLoading;\r\nconst getEmployeesAllError = (state) => state.employees.employeesAllError;\r\nconst getEmployeesActive = (state) => state.employees.employeesActive;\r\n\r\nconst alphabetEnglish = () => [\r\n  'a',\r\n  'b',\r\n  'c',\r\n  'd',\r\n  'e',\r\n  'f',\r\n  'g',\r\n  'h',\r\n  'i',\r\n  'j',\r\n  'k',\r\n  'l',\r\n  'm',\r\n  'n',\r\n  'o',\r\n  'p',\r\n  'q',\r\n  'r',\r\n  's',\r\n  't',\r\n  'u',\r\n  'v',\r\n  'w',\r\n  'x',\r\n  'y',\r\n  'z',\r\n];\r\n\r\nconst getEmployeesAllSorted = createSelector(\r\n  [getEmployeesAll, alphabetEnglish],\r\n  (employees, alphabetEnglish) =>\r\n    alphabetEnglish.reduce((acc, letter) => {\r\n      const result = { letter, employeesGroup: [] };\r\n\r\n      employees.forEach((employeesItem) => {\r\n        if (employeesItem.firstName.at().toLowerCase() === letter)\r\n          result.employeesGroup.push(employeesItem);\r\n      });\r\n\r\n      acc.push(result);\r\n\r\n      return acc;\r\n    }, [])\r\n);\r\n\r\nconst months = () => [\r\n  'November',\r\n  'December',\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n];\r\n\r\nconst getEmployeesActiveSorted = createSelector(\r\n  [getEmployeesAll, months, getEmployeesActive],\r\n  (employees, months, employeesActiveIds) =>\r\n    months.reduce((acc, month) => {\r\n      const result = { month, employeesGroup: [] };\r\n\r\n      employees.forEach((employeesItem) => {\r\n        const formattedBirthdayMonth = new Date(\r\n          employeesItem.dob\r\n        ).toLocaleString('en-US', { month: 'long' });\r\n\r\n        if (\r\n          employeesActiveIds.includes(employeesItem.id) &&\r\n          formattedBirthdayMonth.toLowerCase() === month.toLowerCase()\r\n        )\r\n          result.employeesGroup.push(employeesItem);\r\n\r\n        result.employeesGroup.sort((a, b) =>\r\n          a.lastName.localeCompare(b.lastName)\r\n        );\r\n      });\r\n\r\n      acc.push(result);\r\n\r\n      return acc;\r\n    }, [])\r\n);\r\n\r\nexport {\r\n  getEmployeesAll,\r\n  getEmployeesAllIsLoading,\r\n  getEmployeesAllError,\r\n  getEmployeesActive,\r\n  getEmployeesAllSorted,\r\n  getEmployeesActiveSorted,\r\n};\r\n","import { useSelector } from 'react-redux';\r\nimport { getEmployeesActiveSorted } from '../../redux/employees/employeesSelectors';\r\n\r\nimport styles from './EmployeesActiveList.module.css';\r\n\r\nexport default function EmployeesActiveList() {\r\n  const employeesActive = useSelector(getEmployeesActiveSorted);\r\n\r\n  return (\r\n    <div className={styles.employeesActiveListWrap}>\r\n      <h2 className={styles.employeesActiveListTitle}>Employees birthday</h2>\r\n      <ul className={styles.employeesActiveList}>\r\n        {employeesActive.map(({ month, employeesGroup }) => (\r\n          <li key={month} className={styles.employeesActiveListItem}>\r\n            <span className={styles.monthTitle}>{month}</span>\r\n            {employeesGroup.length > 0 ? (\r\n              <ul>\r\n                {employeesGroup.map(({ id, firstName, lastName, dob }) => (\r\n                  <li key={id} className={styles.employeesGroupItem}>\r\n                    <p>\r\n                      {firstName} {lastName} - {new Date(dob).getDate()}{' '}\r\n                      {new Date(dob).toLocaleString('en-US', { month: 'long' })}\r\n                      , {new Date(dob).getFullYear()} year\r\n                    </p>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p>No Employees</p>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n//Employees List is empty\r\n","import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport {\r\n  addEmployeeActiveId,\r\n  removeEmployeeActiveId,\r\n} from '../../redux/employees/employeesSlice';\r\nimport { getEmployeesActive } from '../../redux/employees/employeesSelectors';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport styles from './EmployeeCard.module.css';\r\n\r\nexport default function EmployeeCard({ data }) {\r\n  const { id, firstName, lastName } = data;\r\n\r\n  const dispatch = useDispatch();\r\n  const employeesActive = useSelector(getEmployeesActive);\r\n  const [employeeStatus, setEmployeeStatus] = useState('notActive');\r\n\r\n  useEffect(() => {\r\n    employeesActive.includes(id)\r\n      ? setEmployeeStatus('active')\r\n      : setEmployeeStatus('notActive');\r\n  }, []);\r\n\r\n  const onEmployeeStatusChange = (e) => {\r\n    setEmployeeStatus(e.target.value);\r\n\r\n    employeeStatus === 'notActive'\r\n      ? dispatch(addEmployeeActiveId(id))\r\n      : dispatch(removeEmployeeActiveId(id));\r\n  };\r\n\r\n  const classNames = [styles.employeeName];\r\n\r\n  if (employeeStatus === 'active') classNames.push(styles.active);\r\n\r\n  return (\r\n    <li className={styles.employeeCard}>\r\n      <h3 className={classNames.join(' ')}>\r\n        {firstName} {lastName}\r\n      </h3>\r\n      <form>\r\n        <label className={styles.employeeStatusBtnLabel}>\r\n          <input\r\n            type=\"radio\"\r\n            checked={employeeStatus === 'active'}\r\n            name={`${id}_employeeStatus`}\r\n            value=\"active\"\r\n            onChange={onEmployeeStatusChange}\r\n          />\r\n          <span>active</span>\r\n        </label>\r\n        <label className={styles.employeeStatusBtnLabel}>\r\n          <input\r\n            type=\"radio\"\r\n            checked={employeeStatus === 'notActive'}\r\n            name={`${id}_employeeStatus`}\r\n            value=\"notActive\"\r\n            onChange={onEmployeeStatusChange}\r\n          />\r\n          <span>not active</span>\r\n        </label>\r\n      </form>\r\n    </li>\r\n  );\r\n}\r\n","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getEmployeesAllData } from '../../redux/employees/employeesOperations';\r\nimport {\r\n  getEmployeesAllIsLoading,\r\n  getEmployeesAllError,\r\n  getEmployeesAllSorted,\r\n} from '../../redux/employees/employeesSelectors';\r\n\r\nimport styles from './EmployeesAllList.module.css';\r\nimport EmployeeCard from '../EmployeeCard/EmployeeCard';\r\n\r\nexport default function EmployeesAllList() {\r\n  const dispatch = useDispatch();\r\n\r\n  const employeesAllSorted = useSelector(getEmployeesAllSorted);\r\n\r\n  useEffect(() => {\r\n    dispatch(getEmployeesAllData());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.employeesAllListWrap}>\r\n      <h1 className={styles.employeesAllListTitle}>Employees</h1>\r\n      <ul className={styles.employeesAllList}>\r\n        {employeesAllSorted.map(({ letter, employeesGroup }) => (\r\n          <li key={letter} className={styles.employeesAllListItem}>\r\n            <h2 className={styles.letterTitle}>{letter}</h2>\r\n            {employeesGroup.length > 0 ? (\r\n              <ul className={styles.employeesGroupList}>\r\n                {employeesGroup.map((employeesItem) => (\r\n                  <EmployeeCard key={employeesItem.id} data={employeesItem} />\r\n                ))}\r\n              </ul>\r\n            ) : (\r\n              <p>No Employees</p>\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import EmployeesActiveList from './components/EmployeesActiveList/EmployeesActiveList';\nimport EmployeesAllList from './components/EmployeesAllList/EmployeesAllList';\n\nfunction App() {\n  return (\n    <main className=\"App\">\n      <EmployeesAllList />\n      <EmployeesActiveList />\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { store, persistor } from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeesActiveListWrap\":\"EmployeesActiveList_employeesActiveListWrap__tTw8E\",\"employeesActiveListTitle\":\"EmployeesActiveList_employeesActiveListTitle__2pE7n\",\"employeesActiveList\":\"EmployeesActiveList_employeesActiveList__2GiE3\",\"employeesActiveListItem\":\"EmployeesActiveList_employeesActiveListItem__zzRWn\",\"monthTitle\":\"EmployeesActiveList_monthTitle__37AfX\",\"employeesGroupItem\":\"EmployeesActiveList_employeesGroupItem__3me8g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeesAllListWrap\":\"EmployeesAllList_employeesAllListWrap__1qlwm\",\"employeesAllListTitle\":\"EmployeesAllList_employeesAllListTitle__1HF4r\",\"employeesAllList\":\"EmployeesAllList_employeesAllList__1M0aV\",\"letterTitle\":\"EmployeesAllList_letterTitle__2c8fu\",\"employeesAllListItem\":\"EmployeesAllList_employeesAllListItem__14Iiz\",\"employeesGroupList\":\"EmployeesAllList_employeesGroupList__1Doy4\"};"],"sourceRoot":""}